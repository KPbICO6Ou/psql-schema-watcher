#!/bin/bash
# PostgreSQL Schema Backup Script
# Creates a complete schema backup including tables, users, privileges, procedures and functions

# Load environment variables
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Set default values if not provided
PG_HOST=${POSTGRES_HOST:-localhost}
PG_PORT=${POSTGRES_PORT:-5432}
PG_USER=${POSTGRES_USER:-postgres}
PG_PASSWORD=${POSTGRES_PASSWORD:-password}
PG_DB=${POSTGRES_DB:-default}

# Output file
OUTPUT_FILE="schema.sql"

echo "[BACKUP] Starting PostgreSQL schema backup..."
echo "[BACKUP] Database: $PG_DB"
echo "[BACKUP] Host: $PG_HOST:$PG_PORT"
echo "[BACKUP] User: $PG_USER"
echo "[BACKUP] Output: $OUTPUT_FILE"

# Set PGPASSWORD for non-interactive authentication
export PGPASSWORD="$PG_PASSWORD"

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Start backup file with header
cat > "$OUTPUT_FILE" << EOF
-- PostgreSQL Schema Backup
-- Database: $PG_DB
-- Host: $PG_HOST:$PG_PORT
-- Generated by psql-watcher script.sh

-- ==============================================
-- SCHEMA BACKUP FOR DATABASE: $PG_DB
-- ==============================================

EOF

log "Backing up database schema..."

# Check if PostgreSQL clients are available
if ! command -v pg_dump &> /dev/null; then
    log "WARNING: pg_dump not found. Creating demo backup structure..."
    
    # Create demo backup structure with real SQL
    cat >> "$OUTPUT_FILE" << EOF

-- ==============================================
-- DEMO BACKUP STRUCTURE
-- ==============================================
-- Note: PostgreSQL clients (pg_dump, psql) not installed
-- This is a demo structure showing what would be backed up

-- Example tables that would be backed up
CREATE TABLE IF NOT EXISTS example_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS posts (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    author_id INTEGER REFERENCES users(id),
    published BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Example indexes
CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
CREATE INDEX IF NOT EXISTS idx_posts_author ON posts(author_id);
CREATE INDEX IF NOT EXISTS idx_posts_published ON posts(published);

-- Example functions
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS \$\$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
\$\$ LANGUAGE plpgsql;

-- Example triggers
CREATE TRIGGER update_example_table_updated_at
    BEFORE UPDATE ON example_table
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Example views
CREATE OR REPLACE VIEW active_users AS
SELECT id, username, created_at
FROM users
WHERE is_active = TRUE;

-- Example roles
CREATE ROLE IF NOT EXISTS app_user;
CREATE ROLE IF NOT EXISTS app_admin;

-- Example grants
GRANT SELECT, INSERT, UPDATE ON example_table TO app_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO app_admin;

EOF
    log "Demo backup structure created"
    exit 0
fi

# 1. Database and schema creation
log "1. Backing up database and schema structure..."
pg_dump -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" \
    --schema-only \
    --no-owner \
    --no-privileges \
    --no-tablespaces \
    --no-comments \
    --no-security-labels \
    --no-subscriptions \
    --no-publications \
    --no-sync \
    --format=plain >> "$OUTPUT_FILE"

# 2. Users and roles
log "2. Backing up users and roles..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- USERS AND ROLES
-- ==============================================

EOF

# Get all roles
psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t -c "
SELECT 'CREATE ROLE ' || rolname || ';'
FROM pg_roles 
WHERE rolname NOT IN ('postgres', 'rdsadmin', 'rds_superuser', 'rds_replication', 'rds_iam')
ORDER BY rolname;
" >> "$OUTPUT_FILE"

# 3. Privileges and permissions
log "3. Backing up privileges and permissions..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- PRIVILEGES AND PERMISSIONS
-- ==============================================

EOF

# Get table privileges
psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t -c "
SELECT 'GRANT ' || privilege_type || ' ON ' || table_name || ' TO ' || grantee || ';'
FROM information_schema.table_privileges 
WHERE grantor != grantee
ORDER BY table_name, grantee, privilege_type;
" >> "$OUTPUT_FILE"

# Get schema privileges
psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t -c "
SELECT 'GRANT ' || privilege_type || ' ON SCHEMA ' || schema_name || ' TO ' || grantee || ';'
FROM information_schema.usage_privileges 
WHERE object_type = 'SCHEMA' AND grantor != grantee
ORDER BY schema_name, grantee, privilege_type;
" >> "$OUTPUT_FILE" 2>/dev/null || true

# 4. Functions and procedures
log "4. Backing up functions and procedures..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- FUNCTIONS AND PROCEDURES
-- ==============================================

EOF

# Get all functions and procedures
pg_dump -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" \
    --schema-only \
    --no-owner \
    --no-privileges \
    --no-tablespaces \
    --no-comments \
    --no-security-labels \
    --no-subscriptions \
    --no-publications \
    --no-sync \
    --format=plain \
    --section=pre-data \
    --section=post-data | grep -E "(CREATE|ALTER).*(FUNCTION|PROCEDURE)" >> "$OUTPUT_FILE" 2>/dev/null || true

# 5. Sequences
log "5. Backing up sequences..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- SEQUENCES
-- ==============================================

EOF

pg_dump -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" \
    --schema-only \
    --no-owner \
    --no-privileges \
    --no-tablespaces \
    --no-comments \
    --no-security-labels \
    --no-subscriptions \
    --no-publications \
    --no-sync \
    --format=plain \
    --section=pre-data | grep -E "CREATE SEQUENCE" >> "$OUTPUT_FILE" 2>/dev/null || true

# 6. Indexes
log "6. Backing up indexes..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- INDEXES
-- ==============================================

EOF

pg_dump -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" \
    --schema-only \
    --no-owner \
    --no-privileges \
    --no-tablespaces \
    --no-comments \
    --no-security-labels \
    --no-subscriptions \
    --no-publications \
    --no-sync \
    --format=plain \
    --section=pre-data | grep -E "CREATE.*INDEX" >> "$OUTPUT_FILE" 2>/dev/null || true

# 7. Triggers
log "7. Backing up triggers..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- TRIGGERS
-- ==============================================

EOF

pg_dump -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" \
    --schema-only \
    --no-owner \
    --no-privileges \
    --no-tablespaces \
    --no-comments \
    --no-security-labels \
    --no-subscriptions \
    --no-publications \
    --no-sync \
    --format=plain \
    --section=pre-data | grep -E "CREATE.*TRIGGER" >> "$OUTPUT_FILE" 2>/dev/null || true

# 8. Views
log "8. Backing up views..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- VIEWS
-- ==============================================

EOF

pg_dump -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" \
    --schema-only \
    --no-owner \
    --no-privileges \
    --no-tablespaces \
    --no-comments \
    --no-security-labels \
    --no-subscriptions \
    --no-publications \
    --no-sync \
    --format=plain \
    --section=pre-data | grep -E "CREATE.*VIEW" >> "$OUTPUT_FILE" 2>/dev/null || true

# 9. Extensions
log "9. Backing up extensions..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- EXTENSIONS
-- ==============================================

EOF

psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t -c "
SELECT 'CREATE EXTENSION IF NOT EXISTS ' || extname || ';'
FROM pg_extension 
WHERE extname != 'plpgsql'
ORDER BY extname;
" >> "$OUTPUT_FILE" 2>/dev/null || true

# 10. Database settings and configuration
log "10. Backing up database settings..."
cat >> "$FULL_OUTPUT_FILE" << EOF

-- ==============================================
-- DATABASE SETTINGS
-- ==============================================

EOF

psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DB" -t -c "
SELECT 'ALTER DATABASE ' || current_database() || ' SET ' || name || ' = ' || setting || ';'
FROM pg_settings 
WHERE context IN ('user', 'superuser', 'postmaster')
AND source != 'default'
ORDER BY name;
" >> "$OUTPUT_FILE" 2>/dev/null || true

# Add footer
cat >> "$OUTPUT_FILE" << EOF

-- ==============================================
-- BACKUP COMPLETED
-- ==============================================
-- Database: $PG_DB
-- Host: $PG_HOST:$PG_PORT
-- ==============================================

EOF

# Get file size
FILE_SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)

log "Backup completed successfully!"
log "Output file: $OUTPUT_FILE"
log "File size: $FILE_SIZE"

# Show summary
echo ""
echo "=============================================="
echo "BACKUP SUMMARY"
echo "=============================================="
echo "Database: $PG_DB"
echo "Host: $PG_HOST:$PG_PORT"
echo "Output file: $OUTPUT_FILE"
echo "File size: $FILE_SIZE"
echo "Status: Ready"
echo "=============================================="

# Clean up environment variable
unset PGPASSWORD

exit 0
